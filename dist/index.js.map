{"version":3,"sources":["index.js"],"names":["createExec","gun","opts","logging","log","isObj","obj","commands","arrWrapObj","Error","flatten","a","Array","isArray","concat","map","normalizeArgs","args","normalizeArr","defaultLog","level","shallow","value","copy","_","defaultIsValidRoot","command","node","isValidRoot","execute","gunInstance","options","reduce","keys","key","commandName","root","ctx","returnVal","apply","e"],"mappings":"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","file":"index.js","sourcesContent":["export default function createExec(gun, opts = {}) {\n  let {\n    logging,\n    log,\n  } = opts\n\n  function isObj(obj) {\n    return (typeof commands !== 'object')\n  }\n\n  function arrWrapObj(obj) {\n    if (!isObj(obj)) {\n      throw new Error(`Each command must be an object, was: ${typeof obj} ${obj}`)\n    }\n    return [obj]\n  }\n\n  function flatten(a) {\n    return Array.isArray(a) ? [].concat(...a.map(flatten)) : a;\n  }\n\n  function normalizeArgs(args) {\n    args = flatten(args)\n    return normalizeArr(args)\n  }\n\n  function normalizeArr(obj) {\n    return Array.isArray(obj) ? obj : arrWrapObj(obj)\n  }\n\n  function defaultLog(level, ...args) {\n    if (logging) {\n      console.log(...args)\n    }\n  }\n\n  log = log || defaultLog\n\n  // could be used in case command is {val: cb, shallow: true}\n  function shallow(value) {\n    let copy = Object.assign({}, value)\n    delete copy._\n    return copy\n  }\n\n  function defaultIsValidRoot(command, node) {\n    if (command === 'put' || command === 'set') {\n      return false\n    }\n    return true\n  }\n  let isValidRoot = opts.isValidRoot || defaultIsValidRoot\n\n  return function execute(gunInstance, commands, options) {\n    logging = options ? options.logging : logging\n\n    // must be Object or Array\n    if (!isObj(commands)) {\n      log('error', 'execute: Invalid commands ', commands)\n      throw new Error('Execute command argument must be an Object or Array')\n    }\n    commands = normalizeArr(commands)\n\n    return commands.reduce((node, command) => {\n      let keys = Object.keys(command)\n      let key = keys[0]\n      let commandName = key\n      let args = command[key]\n\n      // rewind to root level of gunInstance\n      if (command.root && isValidRoot(command, node)) {\n        log('info', 'chain reset to root')\n        node = gunInstance\n      }\n\n      let ctx = node\n      let returnVal\n      args = normalizeArgs(args)\n      log('info', 'command', command)\n      log('info', 'execute', commandName, args)\n      try {\n        returnVal = node[commandName].apply(ctx, args)\n      } catch (e) {\n        log('error', node)\n        throw new Error(`execute: Failed applying ${command}`)\n      }\n      return returnVal\n    }, gunInstance)\n  }\n}"]}