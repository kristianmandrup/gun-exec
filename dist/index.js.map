{"version":3,"sources":["index.js"],"names":["createExec","gun","opts","isObj","obj","commands","arrWrapObj","Error","normalizeArr","Array","isArray","defaultLog","level","logging","args","log","execute","g","reduce","node","command","keys","key","commandName","apply","e"],"mappings":";;;;;;;;;;;;;;kBAAwBA,U;;;;AAAT,SAASA,UAAT,CAAoBC,GAApB,EAAoC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AACjD,WAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,WAAQ,QAAOC,QAAP,uDAAOA,QAAP,OAAoB,QAA5B;AACD;;AAED,WAASC,UAAT,CAAoBF,GAApB,EAAyB;AACvB,QAAI,CAACD,MAAMC,GAAN,CAAL,EAAiB;AACf,YAAM,IAAIG,KAAJ,mDAAyDH,GAAzD,uDAAyDA,GAAzD,WAAgEA,GAAhE,CAAN;AACD;AACD,WAAO,CAACA,GAAD,CAAP;AACD;;AAED,WAASI,YAAT,CAAsBJ,GAAtB,EAA2B;AACzB,WAAOK,MAAMC,OAAN,CAAcN,GAAd,IAAqBA,GAArB,GAA2BE,WAAWF,GAAX,CAAlC;AACD;;AAED,WAASO,UAAT,CAAoBC,KAApB,EAAoC;AAClC,QAAIV,KAAKW,OAAT,EAAkB;AAAA;;AAAA,wCADUC,IACV;AADUA,YACV;AAAA;;AAChB,2BAAQC,GAAR,iBAAeD,IAAf;AACD;AACF;;AApBgD,MAuB/CD,OAvB+C,GAyB7CX,IAzB6C,CAuB/CW,OAvB+C;AAAA,MAwB/CE,GAxB+C,GAyB7Cb,IAzB6C,CAwB/Ca,GAxB+C;;;AA2BjDA,QAAMA,OAAOJ,UAAb;;AAEA,SAAO,SAASK,OAAT,CAAiBC,CAAjB,EAAoBZ,QAApB,EAA8B;AACnC;AACA,QAAI,CAACF,MAAME,QAAN,CAAL,EAAsB;AACpBU,UAAI,OAAJ,EAAa,4BAAb,EAA2CV,QAA3C;AACA,YAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;AACD;AACDF,eAAWG,aAAaH,QAAb,CAAX;;AAEA,WAAOA,SAASa,MAAT,CAAgB,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACxC,UAAIC,OAAO,oBAAYD,OAAZ,CAAX;AACA,UAAIE,MAAMD,KAAK,CAAL,CAAV;AACA,UAAIE,cAAcD,GAAlB;AACA,UAAIR,OAAOM,QAAQE,GAAR,CAAX;;AAEAR,aAAON,aAAaM,IAAb,CAAP;AACA;AACAC,UAAI,MAAJ,EAAY,SAAZ,EAAuBK,OAAvB;AACAL,UAAI,MAAJ,EAAY,SAAZ,EAAuBQ,WAAvB,EAAoCT,IAApC;AACA,UAAI;AACFK,eAAOA,KAAKI,WAAL,EAAkBC,KAAlB,CAAwBL,IAAxB,EAA8BL,IAA9B,CAAP;AACD,OAFD,CAEE,OAAOW,CAAP,EAAU;AACVV,YAAI,OAAJ,EAAaI,IAAb;AACA,cAAM,IAAIZ,KAAJ,+BAAsCa,OAAtC,CAAN;AACD;AACDL,UAAI,MAAJ,EAAY,QAAZ,EAAsBI,IAAtB;AACA,aAAOA,IAAP;AACD,KAlBM,EAkBJlB,GAlBI,CAAP;AAmBD,GA3BD;AA4BD","file":"index.js","sourcesContent":["export default function createExec(gun, opts = {}) {\n  function isObj(obj) {\n    return (typeof commands !== 'object')\n  }\n\n  function arrWrapObj(obj) {\n    if (!isObj(obj)) {\n      throw new Error(`Each command must be an object, was: ${typeof obj} ${obj}`)\n    }\n    return [obj]\n  }\n\n  function normalizeArr(obj) {\n    return Array.isArray(obj) ? obj : arrWrapObj(obj)\n  }\n\n  function defaultLog(level, ...args) {\n    if (opts.logging) {\n      console.log(...args)\n    }\n  }\n\n  let {\n    logging,\n    log,\n  } = opts\n\n  log = log || defaultLog\n\n  return function execute(g, commands) {\n    // must be Object or Array\n    if (!isObj(commands)) {\n      log('error', 'execute: Invalid commands ', commands)\n      throw new Error('Execute command argument must be an Object or Array')\n    }\n    commands = normalizeArr(commands)\n\n    return commands.reduce((node, command) => {\n      let keys = Object.keys(command)\n      let key = keys[0]\n      let commandName = key\n      let args = command[key]\n\n      args = normalizeArr(args)\n      // log('info', 'node', node)\n      log('info', 'command', command)\n      log('info', 'execute', commandName, args)\n      try {\n        node = node[commandName].apply(node, args)\n      } catch (e) {\n        log('error', node)\n        throw new Error(`execute: Failed applying ${command}`)\n      }\n      log('info', 'return', node)\n      return node\n    }, gun)\n  }\n}"]}